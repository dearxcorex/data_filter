import streamlit as st
import plotly.express as px
from utils import load_data


def show_statisticsshow_dashboard(df):
    # Create three columns for statistics
    col1, col2, col3 = st.columns(3)
    
    with col1:
        total_stations = len(df)
        st.metric(
            label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            value=total_stations
        )
        
    with col2:
        inspected = len(df[df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] == '‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß'])
        st.metric(
            label="‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏õ‡∏µ 2568",
            value=inspected,
            delta=f"{(inspected/len(df)*100):.1f}%"
        )
        
    with col3:
        not_inspected = len(df[df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] == '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à'])
        st.metric(
            label="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏ß‡∏à ‡∏õ‡∏µ 2568",
            value=not_inspected,
            delta=f"{(not_inspected/len(df)*100):.1f}%"
        )

    # Add province-wise statistics
    st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß")
    province_stats = df.groupby('‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î').agg({
        '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ': 'count',
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞': lambda x: (x == '‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß').sum()
    }).reset_index()
    province_stats.columns = ['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß']
    province_stats['‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß'] = (province_stats['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß'] / province_stats['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] * 100).round(1)
    st.dataframe(province_stats, use_container_width=True)


    # # Display province statistics
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Add a chart showing inspection progress
        st.subheader("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        progress = (inspected / total_stations)
        st.progress(progress)
        st.write(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {progress:.1%}")



def show_visualization(filtered_df):
    st.subheader("üìä Data Visualization")

    # Visualization type selector
    viz_type = st.selectbox(
        "Select Visualization Type",
        [ "District Summary", "Inspection Summary"]
    )

    if not filtered_df.empty:
        if viz_type == "District Summary":
            district_stats = filtered_df.groupby(['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠']).agg({
                '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ': 'count',
                '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞': lambda x: (x == '‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß').sum()
            }).reset_index()
            district_stats.columns = ['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß'] 
            district_stats['‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß'] = (district_stats['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß'] / district_stats['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] * 100).round(1)
            st.dataframe(district_stats, use_container_width=True)

            fig = px.bar(
                district_stats,
                x='‡∏≠‡∏≥‡πÄ‡∏†‡∏≠',
                y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                color='‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß',
                facet_col='‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î',
                facet_col_wrap=2,  # Number of columns in the facet grid
                title='‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏£‡∏≤‡∏¢‡∏≠‡∏≥‡πÄ‡∏†‡∏≠',
                color_continuous_scale='RdYlGn',
                height=700,  # Adjust height as needed
              
            )
            fig.update_xaxes(tickangle=45)
            fig.update_layout(
                showlegend=True,
                margin = dict(t=100,l=50,r=50,b=100)
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            status_count = filtered_df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'].value_counts()
            fig = px.pie(
                values=status_count.values,
                names=status_count.index,
                title='‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ',
                hole=0.4
            )
            st.plotly_chart(fig, use_container_width=True)
def main():
    st.title('FM Radio Stations Dashboard')

    # Get data
    df = load_data()

    # Show dashboard
    show_statisticsshow_dashboard(df)
    show_visualization(df)

if __name__ == '__main__':
    main()