import streamlit as st
import plotly.express as px
from utils import load_data
from datetime import datetime



# Set page config at the very start of your script
st.set_page_config(
    page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ß‡∏¥‡∏ó‡∏¢‡∏∏ FM",  # Browser tab title
    page_icon="üìª",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Hide default menu
hide_menu_style = """
        <style>
        #MainMenu {visibility: hidden;}
        </style>
        """
st.markdown(hide_menu_style, unsafe_allow_html=True)

# Customize sidebar title
st.sidebar.markdown("""
    <style>
        [data-testid=stSidebar] [data-testid=stMarkdownContainer] {
            padding-top: 0rem;
        }
        .sidebar-title {
            font-size: 1.3rem;
            font-weight: bold;
            padding: 1rem 0;
            text-align: center;
            border-bottom: 2px solid #f0f2f6;
            margin-bottom: 1rem;
        }
    </style>
    <div class="sidebar-title">üìª ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ß‡∏¥‡∏ó‡∏¢‡∏∏ FM</div>
    """, unsafe_allow_html=True)

# Rename pages in sidebar
st.sidebar.markdown("""
    <style>
        section[data-testid="stSidebar"] .css-17lntkn {
            display: none;
        }
        section[data-testid="stSidebar"] .css-pkbazv {
            font-size: 1rem;
            font-weight: 500;
        }
    </style>
    """, unsafe_allow_html=True)
def add_refresh_section():
    # st.sidebar.markdown('---')
    col1,col2 = st.sidebar.columns([2,1])

    with col1:
        st.markdown(f"üîÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {datetime.now().strftime('%H:%M:%S')}")

    with col2:
        if st.button('üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä'):
            st.cache_data.clear()
            st.rerun()

def show_statisticsshow_dashboard(df):

    add_refresh_section()

    # Create three columns for statistics
    col1, col2, col3 = st.columns(3)
    
    with col1:
        total_stations = len(df)
        st.metric(
            label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            value=total_stations
        )
        
    with col2:
        inspected = len(df[df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] == '‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß'])
        st.metric(
            label="‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏õ‡∏µ 2568",
            value=inspected,
            delta=f"{(inspected/len(df)*100):.1f}%"
        )
        
    with col3:
        not_inspected = len(df[df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] == '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à'])
        st.metric(
            label="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏ß‡∏à ‡∏õ‡∏µ 2568",
            value=not_inspected,
            delta=f"{(not_inspected/len(df)*100):.1f}%"
        )

    #Add sidebar statistics 
    st.sidebar.markdown("---")
    not_applied = len(df[df['‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠'] == '‡πÑ‡∏°‡πà‡∏¢‡∏∑‡πà‡∏ô'])
    st.sidebar.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏¢‡∏∑‡πà‡∏ô: {not_applied}")

    #Option: Add percentage 
    not_applied_percentage = (not_applied/len(df)*100)
    st.sidebar.write(f"‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏¢‡∏∑‡πà‡∏ô: {not_applied_percentage:.1f}%")

    # Add province-wise statistics
    st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß")
    province_stats = df.groupby('‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î').agg({
        '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ': 'count',
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞': lambda x: (x == '‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß').sum()
    }).reset_index()
    province_stats.columns = ['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß']
    province_stats['‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß'] = (province_stats['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß'] / province_stats['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] * 100).round(1)
    st.dataframe(province_stats, use_container_width=True)


    # # Display province statistics
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Add a chart showing inspection progress
        st.subheader("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        progress = (inspected / 200)
        st.progress(progress)
        st.write(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {progress:.1%}")



def show_visualization(filtered_df):
    st.subheader("üìä Data Visualization")

    # Visualization type selector
    viz_type = st.selectbox(
        "Select Visualization Type",
        [ "District Summary", "Inspection Summary"]
    )

    if not filtered_df.empty:
        if viz_type == "District Summary":
            district_stats = filtered_df.groupby(['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠']).agg({
                '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ': 'count',
                '‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠': lambda x: (x == '‡πÑ‡∏°‡πà‡∏¢‡∏∑‡πà‡∏ô').sum(),
                '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞': lambda x: (x == '‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß').sum()
            }).reset_index()
            district_stats.columns = ['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î','‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏¢‡∏∑‡πà‡∏ô','‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß' ] 
            # district_stats['‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß'] = (district_stats['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß'] / district_stats['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] * 100).round(1)
            st.dataframe(district_stats, use_container_width=True)

def main():
    st.title('FM Radio Stations Dashboard')

    # Get data
    df = load_data()

    # Show dashboard
    show_statisticsshow_dashboard(df)
    show_visualization(df)

if __name__ == '__main__':
    main()