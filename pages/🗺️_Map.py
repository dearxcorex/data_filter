import streamlit as st
import pandas as pd
import folium
from streamlit_folium import folium_static
import plotly.express as px
from utils import load_data  # Import the utility function







def show_map_visualization(df):
    st.subheader("üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ß‡∏¥‡∏ó‡∏¢‡∏∏ 3 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")


  
    
    m = folium.Map(
        location=[15.0000, 102.0000],
        zoom_start=8,
        tiles ='CartoDB positron',
        )
    

    #create marker cluster
    inspected_cluster = folium.FeatureGroup(name='‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß')
    not_inspected_cluster = folium.FeatureGroup(name='‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à')


    #add markers
    for idx,row in df.iterrows():
        if pd.notna(row['‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î']) and pd.notna(row['‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î']):
            popup_content = f"""
            <div style="font-family:'Sarabun', sans-serif; font-size:14px;">
            <b>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ:</b> {row['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ']}<br>
            <b>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà:</b> {row['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà']} MHz<br>
            <b>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:</b> {row['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î']}<br>
            <b>‡∏≠‡∏≥‡πÄ‡∏†‡∏≠:</b> {row['‡∏≠‡∏≥‡πÄ‡∏†‡∏≠']}<br>
            <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> {row['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞']}
            </div>
            """

            if row['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] == '‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß':
                icon_color = 'green'
                marker_group = inspected_cluster
            else:
                icon_color = 'red'
                marker_group = not_inspected_cluster

            folium.CircleMarker(
                location=[row['‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î'], row['‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î']],
                radius=8,
                popup=folium.Popup(popup_content, max_width=300),
                color=icon_color,
                fill=True,
                fill_color=icon_color,
                fill_opacity=0.7,
                weight=2,
                tooltip=row['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ']

            ).add_to(marker_group)

    inspected_cluster.add_to(m)
    not_inspected_cluster.add_to(m)
    folium.LayerControl().add_to(m)
    folium.LatLngPopup().add_to(m)
     # Display map
    try:
        folium_static(m)
    except Exception as e:
        st.error(f"Error displaying map: {str(e)}")
    #Statistics
    # col1, col2 = st.columns(2)

    # with col1:
    #         st.subheader("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")
    #         province_summary = df.groupby('‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î').agg({
    #             '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ': 'count',
    #             '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞': lambda x: (x == '‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß').sum()
    #         }).reset_index()
            
    #         province_summary.columns = ['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß']
    #         province_summary['‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß'] = (province_summary['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß'] / province_summary['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] * 100).round(1)
    #         st.dataframe(province_summary, use_container_width=True)

    # with col2:
    #     st.subheader("üìà ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
    #     status_counts = df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'].value_counts()
    #     fig = px.pie(
    #         values=status_counts.values,
    #         names=status_counts.index,
    #         title='‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
    #         hole=0.4,
    #         color_discrete_map={'‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß': '#00CC96', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à': '#EF553B'}
    #     )
    #     st.plotly_chart(fig, use_container_width=True)


def main():
    st.title('üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ß‡∏¥‡∏ó‡∏¢‡∏∏')

    # Load data using utility function
    df = load_data()
    
    if df is not None:
        # Filter for specific provinces
        provinces_of_interest = ['‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥', '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', '‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå']
        filtered_df = df[df['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'].isin(provinces_of_interest)]
        
        # Filters
        st.sidebar.header('üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
        selected_provinces = st.sidebar.multiselect(
            '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î',
            provinces_of_interest,
            default=provinces_of_interest
        )
        
        status_filter = st.sidebar.multiselect(
            '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
            ['‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à'],
            default=['‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à']
        )
        
        # Apply filters
        map_df = filtered_df[
            (filtered_df['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'].isin(selected_provinces)) &
            (filtered_df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'].isin(status_filter))
        ]
        
        if not map_df.empty:
            show_map_visualization(map_df)
            
            # Summary
            st.sidebar.markdown('---')
            st.sidebar.subheader('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
            st.sidebar.write(f'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(map_df)}')
            st.sidebar.write(f'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß: {len(map_df[map_df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == "‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß"])}')
            st.sidebar.write(f'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à: {len(map_df[map_df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à"])}')
        else:
            st.warning('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å')

   

if __name__ == "__main__":
    main()
